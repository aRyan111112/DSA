Question - Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates 
where the candidate numbers sum to target. Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

Example -
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

----------------------------------------------------------------------------------------------------------------------
Note - This approach gives TLE.
Intution - take or not take (inspired from printing subsets concept)

-only change is here we are checking every time if sum==target
-since we don't want duplicate elements list, so we are storing each element list in HashSet
-at last converting Hashset to List.

class Solution {

    public void ss(int i, int[] candidates,int target, List<Integer> elements, HashSet<List<Integer>> st, int sum) {
        if(sum==target) {
            st.add(new ArrayList<>(elements));
            return;
        }
        if(sum>target || i>=candidates.length) {
            return;
        }

        elements.add(candidates[i]);
        sum += candidates[i];
        ss(i+1, candidates, target, elements, st, sum);

        elements.remove(elements.size()-1);
        sum -= candidates[i];
        ss(i+1, candidates, target, elements, st, sum);

    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        HashSet<List<Integer>> st = new HashSet<>();
        // List<List<Integer>> ansList = new ArrayList<>();
        List<Integer> elements = new ArrayList<>();

        ss(0, candidates, target, elements, st, 0);
        return new ArrayList<>(st);
    }
}
