class Solution {
    public void ss(int i, int[] nums, HashSet<List<Integer>> set, List<Integer> elements) {
        if(i>=nums.length) {
            List<Integer> temp = new ArrayList<>(elements);
            Collections.sort(new ArrayList<>(elements));
            set.add(temp);
            return;
        }

        elements.add(nums[i]);
        ss(i+1, nums, set, elements);

        elements.remove(elements.size()-1);
        ss(i+1, nums, set, elements);
    }

    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        HashSet<List<Integer>> set = new HashSet<>();
        List<Integer> elements = new ArrayList<>();

        ss(0, nums, set, elements);

        List<List<Integer>> ansList = new ArrayList<>(set);
        return ansList;
        
    }
}
------------------------------------------------------------------------------------------------
// Optimal Aproach //
class Solution {

    public void ss(int idx, int[] nums, List<List<Integer>> ansList, List<Integer> elements) {
        if(idx>nums.length) {
            ansList.add(new ArrayList<>(elements));
            return;
        }

        for(int i=idx; i<nums.length; i++) {
            if(i > idx && nums[i] == nums[i-1]) continue;

            elements.add(nums[i]);
            ss(i+1, nums, ansList, elements);

            elements.remove(elements.size()-1);
        }
    }

    public List<List<Integer>> subsetsWithDup(int[] nums) {
        
        Arrays.sort(nums);
        List<List<Integer>> ansList = new ArrayList<>();
        List<Integer> elements = new ArrayList<>();

        ss(0, nums, ansList, elements);
        return ansList;
    }
}
