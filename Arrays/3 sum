//* Brute Approach - Nested  Loops *//
public List<List<Integer>> threeSum(int[] nums) {
        int n = nums.length;
        Set<List<Integer>> st = new HashSet<>();

        for(int i=0; i< n-2; i++) {
            for(int j=i+1; j<n; j++) {
                for(int k=j+1; k<n; k++) {
                    int sum = nums[i] + nums[j] + nums[k];
                    if(sum == 0) {
                        List<Integer> elements = new ArrayList<>();
                        elements.add(nums[i]);
                        elements.add(nums[j]);
                        elements.add(nums[k]);
                        Collections.sort(elements);

                        st.add(elements);
                    }
                }
            }
        }
        List<List<Integer>> ans = new ArrayList<>(st);
        return ans;
    }
-------------------------------------------------------------------------------------------------
//* Optimal Approach - Using Two Pointer *//

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

        int n = nums.length;
        HashSet<List<Integer>> ans = new HashSet<>(); 
        for(int i=0; i<n; i++) {
            HashSet<Integer> st = new HashSet<>();
            for(int j=i+1; j<n; j++) {
                int third = -(nums[i] + nums[j]);
                if(st.contains(third)) {
                    List<Integer> temp = new ArrayList<>(); 
                    temp.add(nums[i]);
                    temp.add(nums[j]);   
                    temp.add(third);   

                    Collections.sort(temp);
                    ans.add(temp);
                }
                st.add(nums[j]);
            }
        }
        List<List<Integer>> ansList = new ArrayList<>(ans);
        return ansList;
    }
}
-----------------------------------------------------------------------------------------
//* Optimal Approach - Using Two Pointer *//
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

        int n = nums.length;
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();

        for(int i=0; i<n; i++) {
            if(i>0 && nums[i] == nums[i-1]) continue;
            int j = i+1;
            int k = n-1;

            while(j<k) {
                int sum = nums[i] + nums[j] + nums[k];

                if(sum < 0) {
                    j++;
                } else if (sum > 0) {
                    k--;
                } else {
                    List<Integer> ele = new ArrayList<>();
                    ele.add(nums[i]);
                    ele.add(nums[j]);
                    ele.add(nums[k]);

                    ans.add(ele);
                    j++;
                    k--;
                    while(j<k && nums[j] == nums[j-1]) { j++; }
                    while(j<k && nums[k] == nums[k+1]) { k--; }
                }
            } 
        }

        
        return ans;

    }
}
